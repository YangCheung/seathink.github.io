<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yang's Blog]]></title>
  <link href="http://seathink.github.io/atom.xml" rel="self"/>
  <link href="http://seathink.github.io/"/>
  <updated>2014-11-24T13:16:42+08:00</updated>
  <id>http://seathink.github.io/</id>
  <author>
    <name><![CDATA[Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用Android Gradle瘦身apk]]></title>
    <link href="http://seathink.github.io/blog/2014/11/11/li-yong-android-gradleshou-shen-apk/"/>
    <updated>2014-11-11T16:20:45+08:00</updated>
    <id>http://seathink.github.io/blog/2014/11/11/li-yong-android-gradleshou-shen-apk</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>apk瘦身一般有两条线，</p>

<ol>
<li>去除无用的代码，例如引用一个比较大的lib，只使用了其中很少的功能。其他无用的代码可以想办法去掉</li>
<li>去除无用的资源文件，可能是第三方lib中的，也有可能是开发中引入了无用的资源</li>
</ol>


<p><br></p>

<h2>去除无用代码</h2>

<p>当然是Proguard了！
<br></p>

<p><strong>gradle plug 0.14.0,  runProguard 更名为minifyEnabled</strong>
<br>
<br></p>

<h2>去除无用资源</h2>

<p><a href="http://tools.android.com/tech-docs/new-build-system">Android Gradle plug</a>从0.14.0开始，支持自动去除没有使用的资源。</p>

<p><br></p>

<p>不过，这个开关是默认关闭的。可以在build type使用 shrinkResources true 开启。 要注意，这个功能的使用依赖于code shrinking， 所以minifyEnabled也必须打开。</p>

<p><br>
<br></p>

<blockquote><ol>
<li><p>Support for automatic removal of unused resources</p></li>
<li><p>Off by default for now, enable by setting shrinkResources to true in your release build types. Requires minifyEnabled as well.
<br>
<br></p></li>
</ol>
</blockquote>

<p>具体配置如下</p>

<p><br></p>

<pre><code>android {
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
        }
    }
}﻿
</code></pre>

<h2>效果</h2>

<p>  以我正在开发的一个app为例
<br></p>

<ul>
<li><p>使用前2.02MB</p></li>
<li><p>使用后1.90MB</p></li>
</ul>


<p><br></p>

<p>效果明显！</p>

<p><br>
<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Gradle 多渠道打包配置]]></title>
    <link href="http://seathink.github.io/blog/2014/11/03/android-gradle-duo-qu-dao-da-bao-pei-zhi/"/>
    <updated>2014-11-03T19:56:56+08:00</updated>
    <id>http://seathink.github.io/blog/2014/11/03/android-gradle-duo-qu-dao-da-bao-pei-zhi</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>国内Android app发布一般会有多个渠道，为了跟踪发展情况，通常会为每一个渠道定制一个特别的apk。</p>

<p>一般友盟之类第三方统计的渠道ID定义如下，以wandoujia为例</p>

<pre><code>      &lt;meta-data android:name="UMENG_CHANNEL" android:value="wandoujia" /&gt;
</code></pre>

<p>如果不使用第三方统计，自己也可以在AndroidManifest.xml中定义类似meta-data</p>

<p>如果每个渠道都手工修改，打包，10几个渠道下来😂</p>

<p>咱还是自动化来得方便</p>

<h2>解决方案</h2>

<p>Gradle Android Plugin 0.10 新增了<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger">Manifest Merger</a></p>

<blockquote><p>For custom placeholders replacements, use the following DSL to configure the placeholders values :</p></blockquote>

<pre><code>android {

    defaultConfig { 

        manifestPlaceholders = [ activityLabel:"defaultName"] 

    } 

    productFlavors {

        free { 
        } 

        pro { manifestPlaceholders = [ activityLabel:"proName" ] 

        } 
    }
} 
</code></pre>

<p>Manifest Merger 可以替换Manifest中对应key的值</p>

<p>所以，可以利用Product flavor + manifestPlaceholder 来替换对应渠道的key</p>

<p>假如我们有wandoujia， Google Play， 两个渠道，可以这么写</p>

<p>AndroidManifest.xml</p>

<pre><code>        &lt;meta-data android:name="UMENG_CHANNEL" android:value="$[CHANNEL_KET]" /&gt;
</code></pre>

<p>build.gradle</p>

<pre><code>        productFlavors {
            wandoujia{
                manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name]
            }
            google_play{
                manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name]
            }
        }
</code></pre>

<p>ok, 搞定，几行代码自动生成对应渠道的apk。 其实是将Manifest中的
UMENG_CHANNEL_VALUE替换成了flavorbuild的name
<br/></p>

<p>可以看到每个flavor里面的代码一样，比较啰嗦，还能在简化下，</p>

<pre><code>        productFlavors {
            wandoujia{
            }
            google_play{
            }
        }

        productFlavors.all { flavor -&gt;
            flavor.manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name ]
        }
</code></pre>

<p>一个循环搞定~</p>
]]></content>
  </entry>
  
</feed>
