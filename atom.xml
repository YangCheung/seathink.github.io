<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yang's Blog]]></title>
  <link href="http://devyang.com/atom.xml" rel="self"/>
  <link href="http://devyang.com/"/>
  <updated>2014-12-06T23:35:20+08:00</updated>
  <id>http://devyang.com/</id>
  <author>
    <name><![CDATA[Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Fragment处理Configuration Changes]]></title>
    <link href="http://devyang.com/blog/2014/12/02/handling-configuration-changes-with-fragments/"/>
    <updated>2014-12-02T00:11:38+08:00</updated>
    <id>http://devyang.com/blog/2014/12/02/handling-configuration-changes-with-fragments</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/3821423/background-task-progress-dialog-orientation-change-is-there-any-100-working">StackOverflow</a> 有个问的比较多的问题.</p>

<pre><code>What is the best way to retain active objects—such as running Threads, Sockets, and AsyncTasks—across device configuration changes?
</code></pre>

<p>这个问题面临的难点主要在于Activity的生命周期和后台任务的同步。</p>

<h3>Configuration Changes &amp; Background Tasks</h3>

<p>当Configuration发生变化时，activity会销毁重建，在多线程处理任务时，后台并没有停止，</p>

<p>举个例子，activity进来时开启了AsyncTask，用户稍后转动屏幕导致activity销毁重建。等到AsyncTask执行完毕，处理结果可能会错误提交到已被销毁的activity上。如果后台处理耗时比较久，后台线程持有销毁activity的实例，可能会发生内存泄露。</p>

<p>与此同时，新建的Activity会启动新的后台线程，造成资源浪费。因此在configuration发生变化时，就算没有发生错误，想办法在新老activity之间复用活动的对象，也是必不可少的。</p>

<p>通常情况下，有两个解决办法</p>

<h3>不推荐的方法: 保留Activity</h3>

<p>通常的解决方案是设置android:configChanges属性，避免activity的recreate现象。</p>

<p>但是Google的工程师不推荐这么使用。处理configChanges需要手动写代码设置不同的字符串、layout、drawable、dimesion等资源. 如果不小心处理，很容易发生一系列错误。</p>

<p>还有，很多开发者认为设置android:configChanges=&ldquo;orientation&#8221;这一个属性就能避免recreate，但实际上影响设备configChanges的属性不光屏幕方向，还有连接dock，切换语言等，太多了。每一个都会让当前的activity recreate. 因此，仅仅配置android:configChanges属性并不是一个可取的解决方案</p>

<h3>推荐方案: 用Retained Fragment去管理对象</h3>

<p>自从在Android 3.0引入Fragment，在Activity中管理活动对象的最佳方案就是用利用一个retained Fragment. 实际的工作任务交给这个Fragment去做。</p>

<p>默认情况下，当configChanges时，Fragment会跟着父Activity销毁重建.</p>

<p>Fragment提供了一个接口 Fragment#setRetainInstance(true), 通过设置true，就能独立于Activity的生命周期。具体原理参考官方文档。</p>

<p>因此，我们就能在Fragment内部跑工作线程了~</p>

<p>下面的示例代码，在Fragment内部管理了一个AsyncTask，并不受configChanges的影响。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * This Fragment manages a single background task and retains 
</span><span class='line'> * itself across configuration changes.
</span><span class='line'> */
</span><span class='line'>public class TaskFragment extends Fragment {
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * Callback interface through which the fragment will report the
</span><span class='line'>   * task's progress and results back to the Activity.
</span><span class='line'>   */
</span><span class='line'>  static interface TaskCallbacks {
</span><span class='line'>    void onPreExecute();
</span><span class='line'>    void onProgressUpdate(int percent);
</span><span class='line'>    void onCancelled();
</span><span class='line'>    void onPostExecute();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  private TaskCallbacks mCallbacks;
</span><span class='line'>  private DummyTask mTask;
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * Hold a reference to the parent Activity so we can report the
</span><span class='line'>   * task's current progress and results. The Android framework 
</span><span class='line'>   * will pass us a reference to the newly created Activity after 
</span><span class='line'>   * each configuration change.
</span><span class='line'>   */
</span><span class='line'>  @Override
</span><span class='line'>  public void onAttach(Activity activity) {
</span><span class='line'>    super.onAttach(activity);
</span><span class='line'>    mCallbacks = (TaskCallbacks) activity;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * This method will only be called once when the retained
</span><span class='line'>   * Fragment is first created.
</span><span class='line'>   */
</span><span class='line'>  @Override
</span><span class='line'>  public void onCreate(Bundle savedInstanceState) {
</span><span class='line'>    super.onCreate(savedInstanceState);
</span><span class='line'>
</span><span class='line'>    // Retain this fragment across configuration changes.
</span><span class='line'>    setRetainInstance(true);
</span><span class='line'>
</span><span class='line'>    // Create and execute the background task.
</span><span class='line'>    mTask = new DummyTask();
</span><span class='line'>    mTask.execute();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * Set the callback to null so we don't accidentally leak the 
</span><span class='line'>   * Activity instance.
</span><span class='line'>   */
</span><span class='line'>  @Override
</span><span class='line'>  public void onDetach() {
</span><span class='line'>    super.onDetach();
</span><span class='line'>    mCallbacks = null;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * A dummy task that performs some (dumb) background work and
</span><span class='line'>   * proxies progress updates and results back to the Activity.
</span><span class='line'>   *
</span><span class='line'>   * Note that we need to check if the callbacks are null in each
</span><span class='line'>   * method in case they are invoked after the Activity's and
</span><span class='line'>   * Fragment's onDestroy() method have been called.
</span><span class='line'>   */
</span><span class='line'>  private class DummyTask extends AsyncTask&lt;Void, Integer, Void&gt; {
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onPreExecute() {
</span><span class='line'>      if (mCallbacks != null) {
</span><span class='line'>        mCallbacks.onPreExecute();
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Note that we do NOT call the callback object's methods
</span><span class='line'>     * directly from the background thread, as this could result 
</span><span class='line'>     * in a race condition.
</span><span class='line'>     */
</span><span class='line'>    @Override
</span><span class='line'>    protected Void doInBackground(Void... ignore) {
</span><span class='line'>      for (int i = 0; !isCancelled() && i &lt; 100; i++) {
</span><span class='line'>        SystemClock.sleep(100);
</span><span class='line'>        publishProgress(i);
</span><span class='line'>      }
</span><span class='line'>      return null;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onProgressUpdate(Integer... percent) {
</span><span class='line'>      if (mCallbacks != null) {
</span><span class='line'>        mCallbacks.onProgressUpdate(percent[0]);
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onCancelled() {
</span><span class='line'>      if (mCallbacks != null) {
</span><span class='line'>        mCallbacks.onCancelled();
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    protected void onPostExecute(Void ignore) {
</span><span class='line'>      if (mCallbacks != null) {
</span><span class='line'>        mCallbacks.onPostExecute();
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Android Gradle瘦身apk]]></title>
    <link href="http://devyang.com/blog/2014/11/11/li-yong-android-gradleshou-shen-apk/"/>
    <updated>2014-11-11T16:20:45+08:00</updated>
    <id>http://devyang.com/blog/2014/11/11/li-yong-android-gradleshou-shen-apk</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>apk瘦身一般有两条线，</p>

<ol>
<li>去除无用的代码，例如引用一个比较大的lib，只使用了其中很少的功能。其他无用的代码可以想办法去掉</li>
<li>去除无用的资源文件，可能是第三方lib中的，也有可能是开发中引入了无用的资源</li>
</ol>


<p><br></p>

<h2>去除无用代码</h2>

<p>当然是Proguard了！
<br></p>

<p><strong>gradle plug 0.14.0,  runProguard 更名为minifyEnabled</strong>
<br>
<br></p>

<h2>去除无用资源</h2>

<p><a href="http://tools.android.com/tech-docs/new-build-system">Android Gradle plug</a>从0.14.0开始，支持自动去除没有使用的资源。</p>

<p><br></p>

<p>不过，这个开关是默认关闭的。可以在build type使用 shrinkResources true 开启。 要注意，这个功能的使用依赖于code shrinking， 所以minifyEnabled也必须打开。</p>

<p><br>
<br></p>

<blockquote><ol>
<li><p>Support for automatic removal of unused resources</p></li>
<li><p>Off by default for now, enable by setting shrinkResources to true in your release build types. Requires minifyEnabled as well.
<br>
<br></p></li>
</ol>
</blockquote>

<p>具体配置如下</p>

<p><br></p>

<pre><code>android {
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
        }
    }
}﻿
</code></pre>

<h2>效果</h2>

<p>  以我正在开发的一个app为例
<br></p>

<ul>
<li><p>使用前2.02MB</p></li>
<li><p>使用后1.90MB</p></li>
</ul>


<p><br></p>

<p>效果明显！</p>

<p><br>
<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Gradle 多渠道打包配置]]></title>
    <link href="http://devyang.com/blog/2014/11/03/android-gradle-duo-qu-dao-da-bao-pei-zhi/"/>
    <updated>2014-11-03T19:56:56+08:00</updated>
    <id>http://devyang.com/blog/2014/11/03/android-gradle-duo-qu-dao-da-bao-pei-zhi</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>国内Android app发布一般会有多个渠道，为了跟踪发展情况，通常会为每一个渠道定制一个特别的apk。</p>

<p>一般友盟之类第三方统计的渠道ID定义如下，以wandoujia为例</p>

<pre><code>      &lt;meta-data android:name="UMENG_CHANNEL" android:value="wandoujia" /&gt;
</code></pre>

<p>如果不使用第三方统计，自己也可以在AndroidManifest.xml中定义类似meta-data</p>

<p>如果每个渠道都手工修改，打包，10几个渠道下来😂</p>

<p>咱还是自动化来得方便</p>

<h2>解决方案</h2>

<p>Gradle Android Plugin 0.10 新增了<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger">Manifest Merger</a></p>

<blockquote><p>For custom placeholders replacements, use the following DSL to configure the placeholders values :</p></blockquote>

<pre><code>android {

    defaultConfig { 

        manifestPlaceholders = [ activityLabel:"defaultName"] 

    } 

    productFlavors {

        free { 
        } 

        pro { manifestPlaceholders = [ activityLabel:"proName" ] 

        } 
    }
} 
</code></pre>

<p>Manifest Merger 可以替换Manifest中对应key的值</p>

<p>所以，可以利用Product flavor + manifestPlaceholder 来替换对应渠道的key</p>

<p>假如我们有wandoujia， Google Play， 两个渠道，可以这么写</p>

<p>AndroidManifest.xml</p>

<pre><code>        &lt;meta-data android:name="UMENG_CHANNEL" android:value="$[CHANNEL_KET]" /&gt;
</code></pre>

<p>build.gradle</p>

<pre><code>        productFlavors {
            wandoujia{
                manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name]
            }
            google_play{
                manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name]
            }
        }
</code></pre>

<p>ok, 搞定，几行代码自动生成对应渠道的apk。 其实是将Manifest中的
UMENG_CHANNEL_VALUE替换成了flavorbuild的name
<br/></p>

<p>可以看到每个flavor里面的代码一样，比较啰嗦，还能在简化下，</p>

<pre><code>        productFlavors {
            wandoujia{
            }
            google_play{
            }
        }

        productFlavors.all { flavor -&gt;
            flavor.manifestPlaceholders = [ UMENG_CHANNEL_VALUE:name ]
        }
</code></pre>

<p>一个循环搞定~</p>
]]></content>
  </entry>
  
</feed>
